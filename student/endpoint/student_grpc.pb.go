// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package endpoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentRPCClient is the client API for StudentRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentRPCClient interface {
	// 获取指定 sid 的学生
	GetStudentBySid(ctx context.Context, in *GetStudentBySidRequest, opts ...grpc.CallOption) (*Student, error)
	// 获取所有学生
	GetAllStudents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllStudentsResponse, error)
	// 保存一个学生，存在则更新，不存在则新建
	Save(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Empty, error)
}

type studentRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentRPCClient(cc grpc.ClientConnInterface) StudentRPCClient {
	return &studentRPCClient{cc}
}

var studentRPCGetStudentBySidStreamDesc = &grpc.StreamDesc{
	StreamName: "GetStudentBySid",
}

func (c *studentRPCClient) GetStudentBySid(ctx context.Context, in *GetStudentBySidRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/endpoint.StudentRPC/GetStudentBySid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var studentRPCGetAllStudentsStreamDesc = &grpc.StreamDesc{
	StreamName: "GetAllStudents",
}

func (c *studentRPCClient) GetAllStudents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllStudentsResponse, error) {
	out := new(GetAllStudentsResponse)
	err := c.cc.Invoke(ctx, "/endpoint.StudentRPC/GetAllStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var studentRPCSaveStreamDesc = &grpc.StreamDesc{
	StreamName: "Save",
}

func (c *studentRPCClient) Save(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/endpoint.StudentRPC/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentRPCService is the service API for StudentRPC service.
// Fields should be assigned to their respective handler implementations only before
// RegisterStudentRPCService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type StudentRPCService struct {
	// 获取指定 sid 的学生
	GetStudentBySid func(context.Context, *GetStudentBySidRequest) (*Student, error)
	// 获取所有学生
	GetAllStudents func(context.Context, *Empty) (*GetAllStudentsResponse, error)
	// 保存一个学生，存在则更新，不存在则新建
	Save func(context.Context, *Student) (*Empty, error)
}

func (s *StudentRPCService) getStudentBySid(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentBySidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetStudentBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/endpoint.StudentRPC/GetStudentBySid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetStudentBySid(ctx, req.(*GetStudentBySidRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *StudentRPCService) getAllStudents(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetAllStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/endpoint.StudentRPC/GetAllStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetAllStudents(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *StudentRPCService) save(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/endpoint.StudentRPC/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Save(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterStudentRPCService registers a service implementation with a gRPC server.
func RegisterStudentRPCService(s grpc.ServiceRegistrar, srv *StudentRPCService) {
	srvCopy := *srv
	if srvCopy.GetStudentBySid == nil {
		srvCopy.GetStudentBySid = func(context.Context, *GetStudentBySidRequest) (*Student, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetStudentBySid not implemented")
		}
	}
	if srvCopy.GetAllStudents == nil {
		srvCopy.GetAllStudents = func(context.Context, *Empty) (*GetAllStudentsResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetAllStudents not implemented")
		}
	}
	if srvCopy.Save == nil {
		srvCopy.Save = func(context.Context, *Student) (*Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "endpoint.StudentRPC",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetStudentBySid",
				Handler:    srvCopy.getStudentBySid,
			},
			{
				MethodName: "GetAllStudents",
				Handler:    srvCopy.getAllStudents,
			},
			{
				MethodName: "Save",
				Handler:    srvCopy.save,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "student.proto",
	}

	s.RegisterService(&sd, nil)
}
